Index: src/main/java/NumberTriangle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\nimport java.util.List;\n\n/**\n * This is the provided NumberTriangle class to be used in this coding task.\n *\n * Note: This is like a tree, but some nodes in the structure have two parents.\n *\n * The structure is shown below. Observe that the parents of e are b and c, whereas\n * d and f each only have one parent. Each row is complete and will never be missing\n * a node. So each row has one more NumberTriangle object than the row above it.\n *\n *                  a\n *                b   c\n *              d   e   f\n *            h   i   j   k\n *\n * Also note that this data structure is minimally defined and is only intended to\n * be constructed using the loadTriangle method, which you will implement\n * in this file. We have not included any code to enforce the structure noted above,\n * and you don't have to write any either.\n *\n *\n * See NumberTriangleTest.java for a few basic test cases.\n *\n * Extra: If you decide to solve the Project Euler problems (see main),\n *        feel free to add extra methods to this class. Just make sure that your\n *        code still compiles and runs so that we can run the tests on your code.\n *\n */\npublic class NumberTriangle {\n\n    private int root;\n\n    private NumberTriangle left;\n    private NumberTriangle right;\n\n    public NumberTriangle(int root) {\n        this.root = root;\n    }\n\n    public void setLeft(NumberTriangle left) {\n        this.left = left;\n    }\n\n    public void setRight(NumberTriangle right) {\n        this.right = right;\n    }\n\n    public int getRoot() {\n        return root;\n    }\n\n\n    /**\n     * [not for credit]\n     * Set the root of this NumberTriangle to be the max path sum\n     * of this NumberTriangle, as defined in Project Euler problem 18.\n     * After this method is called, this NumberTriangle should be a leaf.\n     *\n     * Hint: think recursively and use the idea of partial tracing from first year :)\n     *\n     * Note: a NumberTriangle contains at least one value.\n     */\n    public void maxSumPath() {\n        // for fun [not for credit]:\n    }\n\n\n    public boolean isLeaf() {\n        return right == null && left == null;\n    }\n\n\n    /**\n     * Follow path through this NumberTriangle structure ('l' = left; 'r' = right) and\n     * return the root value at the end of the path. An empty string will return\n     * the root of the NumberTriangle.\n     *\n     * You can decide if you want to use a recursive or an iterative approach in your solution.\n     *\n     * You can assume that:\n     *      the length of path is less than the height of this NumberTriangle structure.\n     *      each character in the string is either 'l' or 'r'\n     *\n     * @param path the path to follow through this NumberTriangle\n     * @return the root value at the location indicated by path\n     * a\n     */\n    public int retrieve(String path) {\n        NumberTriangle curr = this;\n        for (int i = 0; i < path.length(); i++){\n            if (path.charAt(i) == 'l') {\n                curr = curr.left;\n            }\n            if (path.charAt(i) == 'r') {\n                curr = curr.right;\n            }\n        }\n        return curr.root;\n    }\n\n    /** Read in the NumberTriangle structure from a file.\n     *\n     * You may assume that it is a valid format with a height of at least 1,\n     * so there is at least one line with a number on it to start the file.\n     *\n     * See resources/input_tree.txt for an example NumberTriangle format.\n     *\n     * @param fname the file to load the NumberTriangle structure from\n     * @return the topmost NumberTriangle object in the NumberTriangle structure read from the specified file\n     * @throws IOException may naturally occur if an issue reading the file occurs\n     */\n    public static NumberTriangle loadTriangle(String fname) throws IOException {\n        // open the file and get a BufferedReader object whose methods\n        // are more convenient to work with when reading the file contents.\n        InputStream inputStream = NumberTriangle.class.getClassLoader().getResourceAsStream(fname);\n        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));\n\n        NumberTriangle top = null;\n        NumberTriangle[] prevRow = null;\n\n        String line = br.readLine();\n        while (line != null) {\n            String[] parts = line.split(\" \");\n            NumberTriangle[] currRow = new NumberTriangle[parts.length];\n            for (int i =0; i < parts.length; i++) {\n                currRow[i] = new NumberTriangle(Integer.parseInt(parts[i]));\n            }\n\n            if  (top == null) {\n                top = currRow[0];\n            }\n            if  (prevRow != null) {\n                for (int i =0; i < prevRow.length; i++) {\n                    prevRow[i].setLeft(currRow[i]);\n                    prevRow[i].setRight(currRow[i+1]);\n                }\n            }\n            prevRow = currRow;\n            line = br.readLine();\n        }\n        br.close();\n        return top;\n    }\n\n    public static void main(String[] args) throws IOException {\n\n        NumberTriangle mt = NumberTriangle.loadTriangle(\"input_tree.txt\");\n\n//        mt.setLeft(new NumberTriangle(0));\n//        mt.setRight(new NumberTriangle(1));\n//        System.out.println(mt.getRoot());\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/NumberTriangle.java b/src/main/java/NumberTriangle.java
--- a/src/main/java/NumberTriangle.java	(revision 955cf30b5b30ab03157d618ca09de77b05cef824)
+++ b/src/main/java/NumberTriangle.java	(date 1759366240818)
@@ -88,16 +88,8 @@
      * a
      */
     public int retrieve(String path) {
-        NumberTriangle curr = this;
-        for (int i = 0; i < path.length(); i++){
-            if (path.charAt(i) == 'l') {
-                curr = curr.left;
-            }
-            if (path.charAt(i) == 'r') {
-                curr = curr.right;
-            }
-        }
-        return curr.root;
+        //Todo
+        return 0;
     }
 
     /** Read in the NumberTriangle structure from a file.
